@ngdoc overview
@name Руководство разработчика: Обзор
@description


# Что такое Angular?

AngularJS — структурированный фреймворк для динамических web-приложений.
Позволяет использовать HTML в качестве языка шаблонов, а так же расширять HTML-синтаксис,
чтобы код вашего приложения выглядел кратко и лаконично.
Используя Data-binding и Dependency injection (идущие из коробки), вы так же уменьшаете количество своего кода.
И все это на браузерном JavaScript и работает с любой серверной технологией.

Angular это то, чем был бы HTML, будь он предназначен для приложений.
HTML замечательный декларативный язык для статических документов.
Он не содержит многого для создания приложений, и, как результат, построение в нем web-приложений сводится
к тому чтобы обмануть браузер, заставив его делать то, что я хочу.

Несоответствия между динамическими приложениями и статическими документами часто решаются следующими способами:

  * **библиотеки** - коллекции функций,
    которые часто используются при создании веб приложений.
    Вы расширяете свой код и вызываете функции из библиотеки,
    когда считаете это необходимым. Например, `jQuery`;
  * **фреймворки** - определенные реализации веб-приложений, где ваш код детализирует логику.
    Фреймворк берет на себя управление и вызывает ваш код в тех случаях, когда ему необходимо
    сделать что-то специфичное для приложения. Примеры: `knockout`, `sproutcore` и т. д.


Angular предлагает другой подход.
Он пытается свести к минимуму несоответствие между документо-центричным HTML и
потребностями приложения путем создания новых HTML-конструкций.
Angular обучает браузер новому синтаксису с помощью конструкций, называемых директивами.
Можно привести следующие примеры:

  * Биндинги данных в форме `{{}}`.
  * Управление структурами DOM для повторяющихся/скрываемых фрагментов DOM.
  * Поддержка форм и проверок форм.
  * Связывание кода с DOM-элементами.
  * Группировка HTML в повторно используемые компоненты.



## Конечное решение

Angular позиционируется как законченное решение в разработке веб-приложений.
Это означает, что он представляет собой не просто часть общей головоломки построения
веб-приложения, а является целым комплексом. Это дает право Angular указывать на то,
как должны строиться CRUD-приложения. Но в то же время он пытается убедиться,
что его мнение по этому поводу - лишь отправная точка, которую Вы можете легко изменить.
Из коробки Angular поставляется со следующим:

  * Все, что Вам нужно при построении CRUD-приложения - это связка из привязки данных,
    основных директив шаблонов, валидации форм, маршрутизации, deep-linking,
    повторно применяемых компонентов, внедрения зависимостей.
  * Тестирование: модульные (unit) тесты, end-to-end тесты, моки, test harnesses.
  * Начальное приложение со структурой директорий и скриптом тестирования в качестве отправной точки.


## Angular Sweet Spot
Angular упрощает разработку приложений предоставляя разработчику более высокий уровень абстракции.
Как и за любую другую абстракцию, за эту приходится платить гибкостью.
Другими словами, Angular подойдет не для каждого приложения.
Angular предназначен для CRUD-приложений. К счастью, CRUD-приложения составляют как
минимум 90% всех веб-приложений. Но важно понимать, когда Angular будет хорошим выбором,
а когда - не очень.

Игры и редакторы интерфейса - это яркие примеры очень интенсивных и сложных манипуляций с DOM.
Эти виды приложений отличаются от CRUD-приложений, и, как результат, не подходят для Angular.
В этом случае что-то более близкое к железу, как, например, jQuery, может быть гораздо лучшим вариантом.

# Вводный пример Angular
Ниже представлено типичное CRUD-приложение с формой. Значения из формы проходят проверку
и используются для формирования результата, который приводится к определенной локали.
Вот базовые концепции, с которыми может столкнуться разработчик приложения:

  * привязка модели данных к UI.
  * запись, чтение и проверка пользовательского ввода.
  * расчет новых значений на основе модели.
  * formatting output in a user specific locale.

<example>
  <file name="script.js">
    function InvoiceCntl($scope) {
      $scope.qty = 1;
      $scope.cost = 19.95;
    }
  </file>
  <file name="index.html">
    <div ng-controller="InvoiceCntl">
      <b>Invoice:</b>
      <br>
      <br>
      <table>
       <tr><td>Quantity</td><td>Cost</td></tr>
       <tr>
         <td><input type="number" ng-pattern="/\d+/" step="1" min="0" ng-model="qty" required ></td>
         <td><input type="number" ng-model="cost" required ></td>
       </tr>
      </table>
      <hr>
      <b>Total:</b> {{qty * cost | currency}}
    </div>
  </file>
  <file name="scenario.js">
    it('should show of angular binding', function() {
      expect(binding('qty * cost')).toEqual('$19.95');
      input('qty').enter('2');
      input('cost').enter('5.00');
      expect(binding('qty * cost')).toEqual('$10.00');
    });
  </file>
</example>

Попробуйте живой пример выше, а затем разберем его и опишем что происходит.

Используя `ng-app` директиву внутри `<html>` теге мы указываем
что это Angular приложение. Так же, директива `ng-app` заставит Angular
произвести {@link bootstrap автоматическую инициализацию} приложения.

    <html ng-app>

Загружаем Angular используя тег `<script>`:

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/?.?.?/angular.min.js"></script>

Используя атрибут `ng-model` внутри тегов `<input>`, Angular автоматически установит
двустороннюю привязку данных, также мы продемонстрировали простую проверку вводимых
данных:

    Quantity: <input type="number" ng-pattern="/\d+/" step="1" min="0" ng-model="qty" required >
    Cost: <input type="number" ng-model="cost" required >

Эти виджеты выглядят довольно просто, но учтите следующие моменты:

  * Когда страница загрузится, Angular привяжет имена виджетов (`qty` и `cost`) к
    переменным с такими же именами. Думайте о этих переменных как о "Моделях"(Model), одной из составляющих
    шаблона Model-View-Controller.
  * Обратите внимание что HTML виджет {@link api/ng.directive:input input}
    имеет особые полномочия. Когда вы вводите недопустимые значения или оставляете
    поля ввода пустыми, они сами указывают на ошибку подсвечиваясь красным цветом.
    Это новое поведение виджетов упрощает создание проверки(validation) значения поля, которая часто используется
    в CRUD приложениях.

И наконец, магические `{{ двойные фигурные скобки }}`:

         Total: {{qty * cost | currency}}

Такая запись, `{{ _выражение_ }}`, является Angular разметкой для привязки данных(data-binding).
Выражение само по себе может быть комбинацией выражения и {@link dev_guide.templates.filters фильтра}: `{{
Выражение | фильтр }}`. Angular предоставляет набор фильтров для форматирования выводимых данных.

В примере выше, выражение внутри двойных фигурных скобок говорит Angular "привяжи данные которые мы
получаем из виджетов к этому месту, перемножь их, и отформатируй полученный результат так что бы он
был похож на деньги".

Обратите внимание, что мы добились такого поведения программы, не вызывая Angular методов,
ни создавая специфического поведение в качестве основы. Мы достигли
такого поведения потому что браузер вел себя в соответствии с тем, что нужно
для динамических web-приложений, а не для статичных документов. Angular has lowered the
impedance mismatch to the point where no library/framework calls are needed.


# The Zen of Angular

Angular is built around the belief that declarative code is better than imperative when it comes
to building UIs and wiring software components together, while imperative code is excellent for
expressing business logic.


  * It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves
    the testability of the code.
  * It is a really, _really_ good idea to regard app testing as equal in importance to app
    writing. Testing difficulty is dramatically affected by the way the code is structured.
  * It is an excellent idea to decouple the client side of an app from the server side. This
    allows development work to progress in parallel, and allows for reuse of both sides.
  * It is very helpful indeed if the framework guides developers through the entire journey of
    building an app: from designing the UI, through writing the business logic, to testing.
  * It is always good to make common tasks trivial and difficult tasks possible.



Angular frees you from the following pain:

  * **Registering callbacks:** Registering callbacks clutters your code, making it hard to see the
    forest for the trees. Removing common boilerplate code such as callbacks is a good thing. It
    vastly reduces the amount of JavaScript coding _you_ have to do, and it makes it easier to see
    what your application does.
  * **Manipulating HTML DOM programmatically:** Manipulating HTML DOM is a cornerstone of AJAX
    applications, but it's cumbersome and error-prone. By declaratively describing how the UI
    should change as your application state changes, you are freed from low level DOM manipulation
    tasks. Most applications written with Angular never have to programmatically manipulate the
    DOM, although you can if you want to.
  * **Marshaling data to and from the UI:** CRUD operations make up the majority of AJAX
    applications. The flow of marshaling data from the server to an internal object to an HTML
    form, allowing users to modify the form, validating the form, displaying validation errors,
    returning to an internal model, and then back to the server, creates a lot of boilerplate
    code. Angular eliminates almost all of this boilerplate, leaving code that describes the
    overall flow of the application rather than all of the implementation details.
  * **Writing tons of initialization code just to get started:** Typically you need to write a lot
    of plumbing just to get a basic "Hello World" AJAX app working. With Angular you can bootstrap
    your app easily using services, which are auto-injected into your application in a {@link
    http://code.google.com/p/google-guice/ Guice}-like dependency-injection style. This allows you
    to get started developing features quickly. As a bonus, you get full control over the
    initialization process in automated tests.


# Видео презентация про Angular

Презентация про Angular на английском языке, от Мая 2012 года. Слайды с презентации можно
посмотреть {@link http://mhevery.github.io/angular-demo-slides/index.html#/list здесь}.

<iframe width="560" height="315" src="http://www.youtube.com/embed/bfrn5VNpwsg" frameborder="0" allowfullscreen></iframe>
