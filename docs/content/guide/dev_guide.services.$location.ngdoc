@ngdoc overview
@name Developer Guide: Angular Services: Применение $location
@description

# Как это работает?

Сервис `$location` разбирает URL в адресной строке браузера (по ссылке {@link
https://developer.mozilla.org/en/window.location window.location}) и делает URL доступным для приложения. 
Изменения в URL в адресной строке отражаются отражаются в сервисе $location и изменения в $location отражаются в адресной строке браузера.

**Сервис $location:**

- Предоставляет доступ к текущему URL в адресной строке браузера, так что вы можете
  - Следить и наблюдать за URL.
  - Изменять URL.
- Синхронизирует URL с браузером, когда пользователь
  - Изменяет адресную строку.
  - Щелкает по кнопкам вперед/назад (или перемещается по истории браузера).
  - Щелкает по ссылкам.
- Представляет объект URL в виде набора методов (протокол, хост, порт, путь, поиск, хэш).


## Сравнение $location с window.location

<table class="table">
<thead>

  <tr>
    <th class="empty-corner-lt"></th>
    <th>window.location</th>
    <th>сервис $location</th>
  </tr>

</thead>
<tbody>

  <tr>
    <td class="head">задача</td>
    <td>разрешение на чтение/запись текущего адреса в браузере</td>
    <td>та же</td>
  </tr>

  <tr>
    <td class="head">API</td>
    <td>предоставляет «сырой» Объект со свойствами, которые могут быть непосредственно изменены</td>
    <td>представляет геттеры и сеттеры в jQuery-стиле</td>
  </tr>

  <tr>
    <td class="head">интеграция с жизненным циклом angular-приложения</td>
    <td>нет</td>
    <td>знает обо всех внутренних фазах жизненного цикла, интегрируется с $watch, ...</td>
  </tr>

  <tr>
    <td class="head">бесшовная интерграция HTML5 API</td>
    <td>нет</td>
    <td>да (с костылями для старых браузеров)</td>
  </tr>

  <tr>
    <td class="head"> осведомленность о корневой директории/контексте, из которого загружено приложение</td>
    <td>нет - window.location.path возвращает «/docroot/actual/path»</td>
    <td>да - $location.path() возвращает «/actual/path»</td>
  </tr>

</tbody>
</table>

## Когда следует использовать $location?
Каждый раз, когда приложение должно реагировать на изменения в текущем URL или если необходимо изменить
текущий URL в браузере.

## Чего не происходит?
Изменение URL в браузере не вызовет полной перезагрузки страницы. Для обновления страницы после
изменения URL, используйте API более низкого уровня, `$ window.location.href`.

# Основной обзор API

Сервис `$location` может вести себя по-разному, в зависимости от настроек, заданных при его создании. 
Настройки по умолчанию подходят большинству приложений,
другие настройки конфигурации могут включить новые особенности.

Как только сервис `$location` создастся, вы можете взаимодействовать с ним через геттеры и сеттеры JQuery-стиля, которые позволяют получить или изменить текущий URL в браузере.

## Настройка сервиса $location

Чтобы настроить сервис `$location`, верните {@link api/ng.$locationProvider $locationProvider} and и установите следующие параметры:


- **html5Mode(mode)**: {boolean}<br />
  `true` - см. режим HTML5<br />
  `false` - см. режим Hashbang<br />
  default: `false`

- **hashPrefix(prefix)**: {string}<br />
  prefix используется для Hashbang URL (используется в режиме Hashbang или в устаревших браузерах в режиме HTML5)<br />
  default: `""`

### Пример настройки
<pre>
$locationProvider.html5Mode(true).hashPrefix('!');
</pre>

## Метод геттеров и сеттеров

Сервис `$location` предоставляет метод геттера только для чтения частей URL (absUrl, protocol, host,
port) и методы геттера/сеттера для url, path, search, hash:
<pre>
// получение текущего пути
$location.path();

// изменение пути
$location.path('/newValue')
</pre>

Все сеттеры возвращют тот же объект `$location` для применения в цепочке. Например, чтобы
изменить несколько сегментов цепочкой сеттеров так:
<pre>$location.path('/newValue').search({key: value});</pre>

Существует специальный метод `replace`, который может быть использован для вызова сервиса $location, чтобы, когда сервис 
$location синхронизируется с браузером, последняя запись в истории была бы заменена
вместо создания новой. Это полезно, когда вы хотите реализовать перенаправление, которое
в противном случае сломает кнопку возврата (переход назад вернул бы перенаправление). Изменить
текущий URL без создания новой записи в истории браузера можно вызвав:
<pre>
  $location.path('/someNewPath');
  $location.replace();
  // или можно выстроить в цепочку: $location.path('/someNewPath').replace();
</pre>

Note that the setters don't update `window.location` immediately. Instead, the `$location` service is
aware of the {@link api/ng.$rootScope.Scope scope} life-cycle and coalesces multiple `$location`
mutations into one "commit" to the `window.location` object during the scope `$digest` phase. Since
multiple changes to the $location's state will be pushed to the browser as a single change, it's
enough to call the `replace()` method just once to make the entire "commit" a replace operation
rather than an addition to the browser history. Once the browser is updated, the $location service
resets the flag set by `replace()` method and future mutations will create new history records,
unless `replace()` is called again.

### Setters and character encoding
You can pass special characters to `$location` service and it will encode them according to rules
specified in {@link http://www.ietf.org/rfc/rfc3986.txt RFC 3986}. When you access the methods:

- All values that are passed to `$location` setter methods, `path()`, `search()`, `hash()`, are
encoded.
- Getters (calls to methods without parameters) return decoded values for the following methods
`path()`, `search()`, `hash()`.
- When you call the `absUrl()` method, the returned value is a full url with its segments encoded.
- When you call the `url()` method, the returned value is path, search and hash, in the form
`/path?search=a&b=c#hash`. The segments are encoded as well.


# Hashbang and HTML5 Modes

`$location` service has two configuration modes which control the format of the URL in the browser
address bar: **Hashbang mode** (the default) and the **HTML5 mode** which is based on using the
HTML5 {@link http://www.w3.org/TR/html5/history.html History API}. Applications use the same API in
both modes and the `$location` service will work with appropriate URL segments and browser APIs to
facilitate the browser URL change and history management.

<img src="img/guide/hashbang_vs_regular_url.jpg">

<table class="table">
<thead>

  <tr>
    <th class="empty-corner-lt"></th>
    <th>Hashbang mode</th>
    <th>HTML5 mode</th>
  </tr>

</thead>
<tbody>

  <tr>
    <td class="head">configuration</td>
    <td>the default</td>
    <td>{ html5Mode: true }</td>
  </tr>

  <tr>
    <td class="head">URL format</td>
    <td>hashbang URLs in all browsers</td>
    <td>regular URLs in modern browser, hashbang URLs in old browser</td>
  </tr>

  <tr>
    <td class="head">&lt;a href=""&gt; link rewriting</td>
    <td>no</td>
    <td>yes</td>
  </tr>

  <tr>
    <td class="head">requires server-side configuration</td>
    <td>no</td>
    <td>yes</td>
  </tr>
</tbody>
</table>

## Hashbang mode (default mode)

In this mode, `$location` uses Hashbang URLs in all browsers.

### Example

<pre>
it('should show example', inject(
  function($locationProvider) {
    $locationProvider.html5Mode(false);
    $locationProvider.hashPrefix = '!';
  },
  function($location) {
    // open http://host.com/base/index.html#!/a
    $location.absUrl() == 'http://host.com/base/index.html#!/a'
    $location.path() == '/a'

    $location.path('/foo')
    $location.absUrl() == 'http://host.com/base/index.html#!/foo'

    $location.search() == {}
    $location.search({a: 'b', c: true});
    $location.absUrl() == 'http://host.com/base/index.html#!/foo?a=b&c'

    $location.path('/new').search('x=y');
    $location.absUrl() == 'http://host.com/base/index.html#!/new?x=y'
  }
));
</pre>

### Crawling your app

To allow indexing of your AJAX application, you have to add special meta tag in the head section of
your document:
<pre><meta name="fragment" content="!" /></pre>

This will cause crawler bot to request links with `_escaped_fragment_` param so that your server
can recognize the crawler and serve a HTML snapshots. For more information about this technique,
see {@link http://code.google.com/web/ajaxcrawling/docs/specification.html Making AJAX Applications
Crawlable}.

## HTML5 mode

In HTML5 mode, the `$location` service getters and setters interact with the browser URL address
through the HTML5 history API, which allows for use of regular URL path and search segments,
instead of their hashbang equivalents. If the HTML5 History API is not supported by a browser, the
`$location` service will fall back to using the hashbang URLs automatically. This frees you from
having to worry about whether the browser displaying your app supports the history API  or not; the
`$location` service transparently uses the best available option.

- Opening a regular URL in a legacy browser -> redirects to a hashbang URL
- Opening hashbang URL in a modern browser -> rewrites to a regular URL

### Example

<pre>
it('should show example', inject(
  function($locationProvider) {
    $locationProvider.html5Mode(true);
    $locationProvider.hashPrefix = '!';
  },
  function($location) {
    // in browser with HTML5 history support:
    // open http://host.com/#!/a -> rewrite to http://host.com/a
    // (replacing the http://host.com/#!/a history record)
    $location.path() == '/a'

    $location.path('/foo');
    $location.absUrl() == 'http://host.com/foo'

    $location.search() == {}
    $location.search({a: 'b', c: true});
    $location.absUrl() == 'http://host.com/foo?a=b&c'

    $location.path('/new').search('x=y');
    $location.url() == 'new?x=y'
    $location.absUrl() == 'http://host.com/new?x=y'

    // in browser without html5 history support:
    // open http://host.com/new?x=y -> redirect to http://host.com/#!/new?x=y
    // (again replacing the http://host.com/new?x=y history item)
    $location.path() == '/new'
    $location.search() == {x: 'y'}

    $location.path('/foo/bar');
    $location.path() == '/foo/bar'
    $location.url() == '/foo/bar?x=y'
    $location.absUrl() == 'http://host.com/#!/foo/bar?x=y'
  }
));
</pre>

### Fallback for legacy browsers

For browsers that support the HTML5 history API, `$location` uses the HTML5 history API to write
path and search. If the history API is not supported by a browser, `$location` supplies a Hasbang
URL. This frees you from having to worry about whether the browser viewing your app supports the
history API  or not; the `$location` service makes this transparent to you.

### Html link rewriting

When you use HTML5 history API mode, you will need different links in different browsers, but all you
have to do is specify regular URL links, such as: `<a href="/some?foo=bar">link</a>`

When a user clicks on this link,

- In a legacy browser, the URL changes to `/index.html#!/some?foo=bar`
- In a modern browser, the URL changes to `/some?foo=bar`


In cases like the following, links are not rewritten; instead, the browser will perform a full page
reload to the original link.

- Links that contain `target` element<br>
  Example: `<a href="/ext/link?a=b" target="_self">link</a>`
- Absolute links that go to a different domain<br>
  Example: `<a href="http://angularjs.org/">link</a>`
- Links starting with '/' that lead to a different base path when base is defined<br>
  Example: `<a href="/not-my-base/link">link</a>`


### Server side

Using this mode requires URL rewriting on server side, basically you have to rewrite all your links
to entry point of your application (e.g. index.html)

### Crawling your app

If you want your AJAX application to be indexed by web crawlers, you will need to add the following
meta tag to the HEAD section of your document:
<pre><meta name="fragment" content="!" /></pre>

This statement causes a crawler to request links with an empty `_escaped_fragment_` parameter so that
your server can recognize the crawler and serve it HTML snapshots. For more information about this
technique, see {@link http://code.google.com/web/ajaxcrawling/docs/specification.html Making AJAX
Applications Crawlable}.

### Relative links

Be sure to check all relative links, images, scripts etc. You must either specify the url base in
the head of your main html file (`<base href="/my-base">`) or you must use absolute urls
(starting with `/`) everywhere because relative urls will be resolved to absolute urls using the
initial absolute url of the document, which is often different from the root of the application.

Running Angular apps with the History API enabled from document root is strongly encouraged as it
takes care of all relative link issues.

### Sending links among different browsers

Because of rewriting capability in HTML5 mode, your users will be able to open regular url links in
legacy browsers and hashbang links in modern browser:

- Modern browser will rewrite hashbang URLs to regular URLs.
- Older browsers will redirect regular URLs to hashbang URLs.

### Example

Here you can see two `$location` instances, both in **Html5 mode**, but on different browsers, so
that you can see the differences. These `$location` services are connected to a fake browsers. Each
input represents address bar of the browser.

Note that when you type hashbang url into first browser (or vice versa) it doesn't rewrite /
redirect to regular / hashbang url, as this conversion happens only during parsing the initial URL
= on page reload.

In this examples we use `<base href="/base/index.html" />`
<doc:example>
<doc:source source="false">

<div ng-non-bindable class="html5-hashbang-example">
  <div id="html5-mode" ng-controller="Html5Cntl">
    <h3>Browser with History API</h3>
    <div ng-address-bar browser="html5"></div><br><br>
    $location.protocol() = {{$location.protocol()}}<br>
    $location.host() = {{$location.host()}}<br>
    $location.port() = {{$location.port()}}<br>
    $location.path() = {{$location.path()}}<br>
    $location.search() = {{$location.search()}}<br>
    $location.hash() = {{$location.hash()}}<br>
    <a href="http://www.host.com/base/first?a=b">/base/first?a=b</a> |
    <a href="http://www.host.com/base/sec/ond?flag#hash">sec/ond?flag#hash</a> |
    <a href="/other-base/another?search">external</a>
  </div>

  <div id="hashbang-mode" ng-controller="HashbangCntl">
    <h3>Browser without History API</h3>
    <div ng-address-bar browser="hashbang"></div><br><br>
    $location.protocol() = {{$location.protocol()}}<br>
    $location.host() = {{$location.host()}}<br>
    $location.port() = {{$location.port()}}<br>
    $location.path() = {{$location.path()}}<br>
    $location.search() = {{$location.search()}}<br>
    $location.hash() = {{$location.hash()}}<br>
    <a href="http://www.host.com/base/first?a=b">/base/first?a=b</a> |
    <a href="http://www.host.com/base/sec/ond?flag#hash">sec/ond?flag#hash</a> |
    <a href="/other-base/another?search">external</a>
  </div>
</div>

<script>
  function FakeBrowser(initUrl, baseHref) {
    this.onUrlChange = function(fn) {
      this.urlChange = fn;
    };

    this.url = function() {
      return initUrl;
    };

    this.defer = function(fn, delay) {
      setTimeout(function() { fn(); }, delay || 0);
    };

    this.baseHref = function() {
      return baseHref;
    };

    this.notifyWhenOutstandingRequests = angular.noop;
  }

  var browsers = {
    html5: new FakeBrowser('http://www.host.com/base/path?a=b#h', '/base/index.html'),
    hashbang: new FakeBrowser('http://www.host.com/base/index.html#!/path?a=b#h', '/base/index.html')
  };

  function Html5Cntl($scope, $location) {
    $scope.$location = $location;
  }

  function HashbangCntl($scope, $location) {
    $scope.$location = $location;
  }

  function initEnv(name) {
    var root = angular.element(document.getElementById(name + '-mode'));
    angular.bootstrap(root, [function($compileProvider, $locationProvider, $provide){
      $locationProvider.html5Mode(true).hashPrefix('!');

      $provide.value('$browser', browsers[name]);
      $provide.value('$document', root);
      $provide.value('$sniffer', {history: name == 'html5'});

      $compileProvider.directive('ngAddressBar', function() {
        return function(scope, elm, attrs) {
          var browser = browsers[attrs.browser],
              input = angular.element('<input type="text">').val(browser.url()),
              delay;

          input.bind('keypress keyup keydown', function() {
            if (!delay) {
              delay = setTimeout(fireUrlChange, 250);
            }
          });

          browser.url = function(url) {
            return input.val(url);
          };

          elm.append('Address: ').append(input);

          function fireUrlChange() {
            delay = null;
            browser.urlChange(input.val());
          }
        };
      });
    }]);
    root.bind('click', function(e) {
      e.stopPropagation();
    });
  }

  initEnv('html5');
  initEnv('hashbang');
</script>

</doc:source>
</doc:example>


# Caveats

## Page reload navigation

The `$location` service allows you to change only the URL; it does not allow you to reload the
page. When you need to change the URL and reload the page or navigate to a different page, please
use a lower level API, {@link api/ng.$window $window.location.href}.

## Using $location outside of the scope life-cycle

`$location` knows about Angular's {@link api/ng.$rootScope.Scope scope} life-cycle. When a URL changes in
the browser it updates the `$location` and calls `$apply` so that all $watchers / $observers are
notified.
When you change the `$location` inside the `$digest` phase everything is ok; `$location` will
propagate this change into browser and will notify all the $watchers / $observers.
When you want to change the `$location` from outside Angular (for example, through a DOM Event or
during testing) - you must call `$apply` to propagate the changes.

## $location.path() and ! or / prefixes

A path should always begin with forward slash (`/`); the `$location.path()` setter will add the
forward slash if it is missing.

Note that the `!` prefix in the hashbang mode is not part of `$location.path()`; it is actually
hashPrefix.


# Testing with the $location service

When using `$location` service during testing, you are outside of the angular's {@link
api/ng.$rootScope.Scope scope} life-cycle. This means it's your responsibility to call `scope.$apply()`.

<pre>
describe('serviceUnderTest', function() {
  beforeEach(module(function($provide) {
    $provide.factory('serviceUnderTest', function($location){
      // whatever it does...
    });
  });

  it('should...', inject(function($location, $rootScope, serviceUnderTest) {
    $location.path('/new/path');
    $rootScope.$apply();

    // test whatever the service should do...

  }));
});
</pre>


# Migrating from earlier AngularJS releases

In earlier releases of Angular, `$location` used `hashPath` or `hashSearch` to process path and
search methods. With this release, the `$location` service processes path and search methods and
then uses the information it obtains to compose hashbang URLs (such as
`http://server.com/#!/path?search=a`), when necessary.

## Changes to your code

<table class="table">
  <thead>
    <tr class="head">
      <th>Navigation inside the app</th>
      <th>Change to</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>$location.href = value<br />$location.hash = value<br />$location.update(value)<br
/>$location.updateHash(value)</td>
      <td>$location.path(path).search(search)</td>
    </tr>

    <tr>
      <td>$location.hashPath = path</td>
      <td>$location.path(path)</td>
    </tr>

    <tr>
      <td>$location.hashSearch = search</td>
      <td>$location.search(search)</td>
    </tr>

    <tr class="head">
      <td>Navigation outside the app</td>
      <td>Use lower level API</td>
    </tr>

    <tr>
      <td>$location.href = value<br />$location.update(value)</td>
      <td>$window.location.href = value</td>
    </tr>

    <tr>
      <td>$location[protocol | host | port | path | search]</td>
      <td>$window.location[protocol | host | port | path | search]</td>
    </tr>

    <tr class="head">
      <td>Read access</td>
      <td>Change to</td>
    </tr>

    <tr>
      <td>$location.hashPath</td>
      <td>$location.path()</td>
    </tr>

    <tr>
      <td>$location.hashSearch</td>
      <td>$location.search()</td>
    </tr>

    <tr>
      <td>$location.href<br />$location.protocol<br />$location.host<br />$location.port<br
/>$location.hash</td>
      <td>$location.absUrl()<br />$location.protocol()<br />$location.host()<br />$location.port()<br
/>$location.path() + $location.search()</td>
    </tr>

    <tr>
      <td>$location.path<br />$location.search</td>
      <td>$window.location.path<br />$window.location.search</td>
    </tr>
  </tbody>
</table>

## Two-way binding to $location

The Angular's compiler currently does not support two-way binding for methods (see {@link
https://github.com/angular/angular.js/issues/404 issue}).  If you should require two-way binding
to the $location object (using {@link api/ng.directive:input.text
ngModel} directive on an input field), you will need to specify an extra model property
(e.g. `locationPath`) with two watchers which push $location updates in both directions. For
example:
<pre>
<!-- html -->
<input type="text" ng-model="locationPath" />
</pre>
<pre>
// js - controller
$scope.$watch('locationPath', function(path) {
  $location.path(path);
});

$scope.$watch('$location.path()', function(path) {
  scope.locationPath = path;
});
</pre>


# Related API

* {@link api/ng.$location $location API}



