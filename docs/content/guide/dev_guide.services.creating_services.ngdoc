@ngdoc overview
@name Руководство разработчика: Сервисы Angular: Создание сервисов
@description

Не смотря на то, что Angular предлагает несколько полезных сервисов, для любого нетривиального
приложения вы найдёте полезным написать свои сервисы. Для этого вам нужно зарегистрировать
фабричную функцию сервиса в модуле. Либо через {@link api/angular.module Module#factory api}, либо
прямо через {@link api/AUTO.$provide $provide} api внутри конфигурационной функции модуля.

Все сервисы Angular участвуют в {@link di внедрении зависимости (DI)}, регистрируя себя в
системе зависимостей Angular (injector) с помощью своего `имени` (id), вместе с указанием
требуемых зависимостей для фабричной функции сервиса. Возможность подменять зависимости для
mock/stub/dummies в тестах позволяет сервисам быть очень тестируемыми.


# Регистрация сервисов

Для регистрации сервиса у вас должен быть модуль, частью которого будет этот сервис. После этого
вы можете зарегистрировать сервис в модуле через {@link api/angular.Module api Модуля} или
используя {@link api/AUTO.$provide $provide} сервис в конфигурационной функции модуля.
Следующий псевдо-код демонстрирует оба способа:

Используя angular.Module api:
<pre>
var myModule = angular.module('myModule', []);
myModule.factory('serviceId', function() {
  var shinyNewServiceInstance;
  //тело фабричной функции модуля, которая конструирует shinyNewServiceInstance
  return shinyNewServiceInstance;
});
</pre>

Используя сервис $provide:
<pre>
angular.module('myModule', [], function($provide) {
  $provide.factory('serviceId', function() {
    var shinyNewServiceInstance;
    //тело фабричной функции, которая конструирует shinyNewServiceInstance
    return shinyNewServiceInstance;
  });
});
</pre>

Заметьте, что регистрируете не экземпляр сервиса, а фабричную функцию, которая создаст экземпляр
при вызове.


# Зависимости

Сервисы могут не только являться зависимостями, но и сами иметь зависимости. Они могут быть
указаны в аргументах фабричной функции. {@link di Прочитайте больше} о внедрении зависимостей (DI)
в Angular и использовании нотации с массивом и свойства $inject для защиты внедрения зависимостей
от минификации кода.

Ниже представлен пример очень простого сервиса. Этот сервис зависит от сервиса `$window` (который
передаётся в качестве параметра в фабричную функцию) и является просто функцией. Сервис просто
записывает все уведомления, а после третьего он показывает все уведомления во всплывающем окне.

<pre>
angular.module('myModule', [], function($provide) {
  $provide.factory('notify', ['$window', function(win) {
    var msgs = [];
    return function(msg) {
      msgs.push(msg);
      if (msgs.length == 3) {
        win.alert(msgs.join("\n"));
        msgs = [];
      }
    };
  }]);
});
</pre>


# Создание экземпляров сервисов в Angular

Для всех сервисов в Angular экземпляры создаются лениво. Это означает, что сервис будет создан только
в том случае, если он нужен для создания экземпляра другого сервиса или компонента приложения, который
зависит от него. Другими словами, Angular не создаст экземпляр сервиса, если только он не потребовался
приложению явным или неявным образом.


# Сервисы как синглтоны

В заключение, важно понимать, что все сервисы Angular - синглтоны приложения. Это означает, что
есть только один экземпляр какого-то конкретного сервиса на один инжектор. Так как у Angular
смертельная аллергия на global state, возможно создать несколько инжектеров, каждый со своим
собственным экземпляром сервиса, но это редко бывает необходимым, за исключением тестов, где
это свойство жизненно необходимо.



## Связанные темы

* {@link dev_guide.services.understanding_services Понимание сервисов}
* {@link dev_guide.services.managing_dependencies Управление зависимостями сервисов}
* {@link dev_guide.services.injecting_controllers Внедрение сервисов в контроллеры}
* {@link dev_guide.services.testing_services Тестирование сервисов в Angular}

## Связанное API

* {@link api/ng Angular Service API}
