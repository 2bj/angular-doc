@ngdoc overview
@name Developer Guide: Понимание областей
@description

**Резюме:**

В AngularJS, дочерняя область видимости обычно прототипически наследуется от родительской. Единственным исключением 
является директива, в которой используется `scope: { ... }`, что создает «изолированную» область видимости,
которая не наследуется прототипически. Такая конструкция часто используется при создании директивы для компонента
«многоразового использования»

Наследование областей, как правило, прямое, и часто даже не нужно знать, как оно делается... пока не столкнешься
с **двухсторонней привязкой данных** (т. е. элементами формы, ng-model) **к примитивам** (напр., числу, строке, 
логическому типу), определенными в родительской области видимости из дочерней. Она работает не так, как этого
ожидают большинство людей. Происходит так, что потомок создает собственную область видимости, которая перекрывает
родительское свойство с одноименным названием. Это не особенность AngularJS, так работает прототипное наследование в 
JavaScript. Новые разработчики AngularJS часто не понимают, что ng-repeat, ng-switch, ng-view и ng-include 
создают новые дочерние области, так что проблема появляется при использовании этих директив.

Этой проблемы легко избежать, следуя «[лучшим практикам](http://habrahabr.ru/post/181882/)», где
говорится, что выражение в ng-model должно всегда содержать точку.

Точка «.» в модели гарантирует, что прототипное наследование работает как надо. Поэтому
`<input type="text" ng-model="someObj.prop1">` лучше чем <br>
`<input type="text" ng-model="prop1">`.

If you really want/need to use a primitive, there are two workarounds:
Если действительно хотите/нужно использовать примитивы, есть два пути решения проблемы:
  1. Используйте `$parent.parentScopeProperty` в дочерней области видимости. Это запретит дочерней области создавать
     собственное свойство.
  2. Определите функцию в родительской области видимости, и обратитесь к ней из потомка, передавая элементарное 
     значение в родителя (не всегда возможно)

**Детали:**

* [Прототипное наследование в JavaScript](#JSproto)
* [Наследование областей видимости в Angular](#Angular)
  * [ng-include](#ngInclude)
  * [ng-switch](#ngSwitch)
  * [ng-repeat](#ngRepeat)
  * [ng-view](#ngView)
  * [ng-controller](#ngController)
  * [directives](#directives)

## <a id="JSproto"></a>Прототипное наследование в JavaScript

В первую очередь, важно иметь четкое представление о прототипном наследовании в JavaScript, особенно если 
пришли из серверного программирования и больше знакомы с классическим наследованием.

Предположим parentScope имеет свойства aString, aNumber, anArray, anObject, и aFunction. Если childScope
прототипически наследуется от parentScope, имеем:

![нормальное прототипное наследование](http://i.stack.imgur.com/aTAGg.png)

(Обратите внимание, что для экономии места, показываю объект `anArray` как одиночный голубой объект с тремя значениями,
а не одиночный голубой объект с тремя отдельными серыми литералами.)

Если попытаться получить доступ к свойствам по умолчанию, определенным в parentScope, из дочерней области видимости,
JavaScript сначала ищет в дочерней области и, не найдя там, затем смотрит в родительской область и находит свойство. 
(Если не нашел бы в parentScope, то продолжил поиск по цепочке прототипов... всех, вплоть до корневой области
видимости). Итак, это все правда:

    childScope.aString === 'parent string'
    childScope.anArray[1] === 20
    childScope.anObject.property1 === 'parent prop1'
    childScope.aFunction() === 'parent output'

Предположим, что после этого сделали так:

    childScope.aString = 'child string'

Цепочка прототипов не принята во внимание, а новое свойство aString добавляется в childScope. **Это новое свойство 
перекрывает свойство из parentScope с таким же названием.** Это будет очень важным, при обсуждении ng-repeat и
ng-include ниже.

![перекрытие](http://i.stack.imgur.com/OyVPW.png)

Предположим, что после этого сделали так:

    childScope.anArray[1] = '22'
    childScope.anObject.property1 = 'child prop1'

Цепочка прототипов взята во внимание, так как объекты (anArray и anObject) не найдены в childScope. Объекты
находятся в parentScope, а значения свойства обновляются в исходных объектах. Новые свойства не добавляются в
childScope; новые объекты не создаются. (Отметим, что в JavaScript массивы и функции также являются объектами.)

![следование по цепочке](http://i.stack.imgur.com/2QceU.png)

Предположим, что после этого сделали так:

    childScope.anArray = [100, 555]
    childScope.anObject = { name: 'Mark', country: 'USA' }

Цепочка прототипов не принята во внимание, и дочерняя область видимости получает два новых свойства объекта, которые
перекрывают свойства  объекта из parentScope с теми же именами.

![не следование по цепочке](http://i.stack.imgur.com/hKetH.png)

Готовое решение:

* Если читаем childScope.propertyX и childScope имеет propertyX, то цепочка прототипа не принимается во внимание.
* Если устанавливаем childScope.propertyX, цепочка прототипов принимается во внимание.

И последний сценарий:

    delete childScope.anArray
    childScope.anArray[1] === 22  // true

Сперва удалим свойство из childScope, а затем, когда попытаемся получить доступ к свойству снова, состоится переход
по цепочке прототипов.

![после удаления свойства](http://i.stack.imgur.com/56uoe.png)

## <a id="Angular"></a>Наследование областей видимости в Angular

Кандидаты:

  * Создают новые области видимости, которые прототипически наследуются: ng-repeat, ng-include, ng-switch,
    ng-view, ng-controller, директивы с `scope: true`, директивы с `transclude: true`.
  * Создает новую область, которая не наследуется прототипически: директивы с `scope: { ... }`. Вместо этого они
    создают «изолированную» область видимости.

Обратите внимание, что по умолчанию, директивы не создают новые области, т.е. по умолчанию `scope: false`.

### <a id="ngInclude"></a>ng-include

Предположим, что имеем в контроллере:

    $scope.myPrimitive = 50;
    $scope.myObject    = {aNumber: 11};

И в HTML:

    <script type="text/ng-template" id="/tpl1.html">
        <input ng-model="myPrimitive">
    </script>
    <div ng-include src="'/tpl1.html'"></div>

    <script type="text/ng-template" id="/tpl2.html">
        <input ng-model="myObject.aNumber">
    </script>
    <div ng-include src="'/tpl2.html'"></div>

Каждая ng-include создает новую дочернюю область видимости, прототипически унаследованную от родительской области.

![ng-include](http://i.stack.imgur.com/ziDfx.png)

Набор (скажем, «77») в первом текстовом поле приведет к тому, что дочерняя область видимости получит новое свойство 
myPrimitive из области видимости, которое перекроет свойство родительской области с одноименным названием.

Вероятно, это не то, чего вы хотите или ожидаете.

![примитив в ng-include](http://i.stack.imgur.com/7l8dg.png)

Typing (say, "99") into the second input textbox does not result in a new child property. Because tpl2.html binds the model to an object property, prototypal inheritance kicks in when the ngModel looks for object myObject -- it finds it in the parent scope.

![ng-include object](http://i.stack.imgur.com/QjvVK.png)

**NOTE:** the picture above is incorrect, the red "99" should still be 50, and the 11 should instead be 99.

We can rewrite the first template to use $parent, if we don't want to change our model from a primitive to an object:

    <input ng-model="$parent.myPrimitive">

Typing (say, "22") into this input textbox does not result in a new child property. The model is now bound to a property of the parent scope (because $parent is a child scope property that references the parent scope).

![ng-include $parent](http://i.stack.imgur.com/kd8pj.png)

For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via scope properties $parent, $$childHead and $$childTail. I normally don't show these scope properties in the diagrams.

For scenarios where form elements are not involved, another solution is to define a function on the parent scope to modify the primitive. Then ensure the child always calls this function, which will be available to the child scope due to prototypal inheritance. E.g.,

    // in the parent scope
    $scope.setMyPrimitive = function(value) {
        $scope.myPrimitive = value;
    }

Here is a [sample fiddle](http://jsfiddle.net/mrajcok/jNxyE/) that uses this "parent function" approach.  (This was part of a [Stack Overflow post](http://stackoverflow.com/a/14104318/215945).)

See also http://stackoverflow.com/a/13782671/215945 and<br> https://github.com/angular/angular.js/issues/1267.

### <a id="ngSwitch"></a> ng-switch

ng-switch scope inheritance works just like ng-include. So if you need 2-way data binding to a primitive in the parent scope, use $parent, or change the model to be an object and then bind to a property of that object. This will avoid child scope hiding/shadowing of parent scope properties.

See also [AngularJS, bind scope of a switch-case?](http://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410)

### <a id="ngRepeat"></a> ng-repeat

Ng-repeat works a little differently. Suppose we have in our controller:

    $scope.myArrayOfPrimitives = [ 11, 22 ];
    $scope.myArrayOfObjects    = [{num: 101}, {num: 202}]

And in our HTML:

    <ul><li ng-repeat="num in myArrayOfPrimitives">
           <input ng-model="num">
        </li>
    <ul>
    <ul><li ng-repeat="obj in myArrayOfObjects">
           <input ng-model="obj.num">
        </li>
    <ul>
For each item/iteration, ng-repeat creates a new scope, which prototypically inherits from the parent scope, **but it also assigns the item's value to a new property on the new child scope**. (The name of the new property is the loop variable's name.) Here's what the Angular source code for ng-repeat actually is:

    childScope = scope.$new(); // child scope prototypically inherits from parent scope ...     
    childScope[valueIdent] = value; // creates a new childScope property

If item is a primitive (as in myArrayOfPrimitives), essentially a copy of the value is assigned to the new child scope property. Changing the child scope property's value (i.e., using ng-model, hence child scope property `num`) does **not** change the array the parent scope references. So in the first ng-repeat above, each child scope gets a `num` property that is independent of the myArrayOfPrimitives array:

![ng-repeat primitive](http://i.stack.imgur.com/nLoiW.png)

This ng-repeat will not work (like you want/expect it to).  In Angular 1.0.2 or earlier, typing into the textboxes changes the values in the gray boxes, which are only visible in the child scopes.  In Angular 1.0.3+, typing into the text boxes has no affect.  (See Artem's explanation as to why on [StackOverflow](http://stackoverflow.com/a/13723990/215945).) What we want is for the inputs to affect the myArrayOfPrimitives array, not a child scope primitive property. To accomplish this, we need to change the model to be an array of objects.

So, if item is an object, a reference to the original object (not a copy) is assigned to the new child scope property. Changing the child scope property's value (i.e., using ng-model, hence `obj.num`) **does** change the object the parent scope references. So in the second ng-repeat above, we have:

![ng-repeat object](http://i.stack.imgur.com/QSjTJ.png)

(I colored one line gray just so that it is clear where it is going.)

This works as expected. Typing into the textboxes changes the values in the gray boxes, which are visible to both the child and parent scopes.

See also [Difficulty with ng-model, ng-repeat, and inputs](http://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs) and<br> [ng-repeat and databinding](http://stackoverflow.com/a/13782671/215945)

### <a id="ngView"></a> ng-view

TBD, but I think it acts just like ng-include.

### <a id="ngController"></a> ng-controller

Nesting controllers using ng-controller results in normal prototypal inheritance, just like ng-include and ng-switch, so the same techniques apply. However, "it is considered bad form for two controllers to share information via $scope inheritance" -- http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/ A service should be used to share data between controllers instead.

(If you really want to share data via controllers scope inheritance, there is nothing you need to do. The child scope will have access to all of the parent scope properties. See also [Controller load order differs when loading or navigating](http://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771))

### <a id="directives"></a> directives

  1. default (`scope: false`) - the directive does not create a new scope, so there is no inheritance here. This is easy, but also dangerous because, e.g., a directive might think it is creating a new property on the scope, when in fact it is clobbering an existing property. This is not a good choice for writing directives that are intended as reusable components.
  2. `scope: true` - the directive creates a new child scope that prototypically inherits from the parent scope. If more than one directive (on the same DOM element) requests a new scope, only one new child scope is created. Since we have "normal" prototypal inheritance, this is like ng-include and ng-switch, so be wary of 2-way data binding to parent scope primitives, and child scope hiding/shadowing of parent scope properties.
  3. `scope: { ... }` - the directive creates a new isolate/isolated scope. It does not prototypically inherit. This is usually your best choice when creating reusable components, since the directive cannot accidentally read or modify the parent scope. However, such directives often need access to a few parent scope properties. The object hash is used to set up two-way binding (using '=') or one-way binding (using '@') between the parent scope and the isolate scope. There is also '&' to bind to parent scope expressions. So, these all create local scope properties that are derived from the parent scope. Note that attributes are used to help set up the binding -- you can't just reference parent scope property names in the object hash, you have to use an attribute. E.g., this won't work if you want to bind to parent property `parentProp` in the isolated scope: `<div my-directive>` and `scope: { localProp: '@parentProp' }`. An attribute must be used to specify each parent property that the directive wants to bind to: `<div my-directive the-Parent-Prop=parentProp>` and `scope: { localProp: '@theParentProp' }`.
<br>Isolate scope's `__proto__` references a [Scope](http://docs.angularjs.org/api/ng.$rootScope.Scope) object (the picture below needs to be updated to show an orange 'Scope' object instead of an 'Object'). Isolate scope's $parent references the parent scope, so although it is isolated and doesn't inherit prototypically from the parent scope, it is still a child scope.
<br>For the picture below we have 
<br>`<my-directive interpolated="{{parentProp1}}" twowayBinding="parentProp2">` and
<br> `scope: { interpolatedProp: '@interpolated', twowayBindingProp: '=twowayBinding' }` 
<br>Also, assume the directive does this in its linking function: `scope.someIsolateProp = "I'm isolated"`
<br>![isolate scope](http://i.stack.imgur.com/MUxS4.png)
<br>One final note: use `attrs.$observe('attr_name', function(value) { ... }` in the linking function to get the interpolated value of isolate scope properties that use the '@' notation.  E.g., if we have this in the linking function -- `attrs.$observe('interpolated', function(value) { ... }` -- `value` would be set to 11.  (`scope.interpolatedProp` is undefined in the linking function.  In contrast, `scope.twowayBindingProp` is defined in the linking function, since it uses the '=' notation.)
<br>For more information on isolate scopes see http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/
  4. `transclude: true` - the directive creates a new "transcluded" child scope, which prototypically inherits from the parent scope.  So if your transcluded content (i.e., the stuff that ng-transclude will be replaced with) requires 2-way data binding to a primitive in the parent scope, use $parent, or change the model to be an object and then bind to a property of that object. This will avoid child scope hiding/shadowing of parent scope properties.<br>The transcluded and the isolated scope (if any) are siblings -- the $parent property of each scope references the same parent scope. When a transcluded and an isolate scope both exist, isolate scope property $$nextSibling will reference the transcluded scope.
<br>For more information on transcluded scopes, see [AngularJS two way binding not working in directive with transcluded scope](http://stackoverflow.com/a/14484903/215945)
<br>For the picture below, assume the same directive as above with this addition: `transclude: true`
<br>![transcluded scope](http://i.stack.imgur.com/fkWHA.png)

This [fiddle](http://jsfiddle.net/mrajcok/7g3QM/) has a `showScope()` function that can be used to examine an isolate scope and its associated transcluded scope. See the instructions in the comments in the fiddle.

## Summary

There are four types of scopes:

  1. normal prototypal scope inheritance -- ng-include, ng-switch, ng-controller, directive with `scope: true`
  2. normal prototypal scope inheritance with a copy/assignment -- ng-repeat. Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.
  3. isolate scope -- directive with `scope: {...}`. This one is not prototypal, but '=', '@', and '&' provide a mechanism to access parent scope properties, via attributes.
  4. transcluded scope -- directive with `transclude: true`. This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope.

For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via properties $parent and $$childHead and $$childTail.

Diagrams were generated with [GraphViz](http://graphviz.org) "*.dot" files, which are on [github](https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams). Tim Caswell's ["Learning JavaScript with Object Graphs"](http://howtonode.org/object-graphs) was the inspiration for using GraphViz for the diagrams.

The above was originally posted on [StackOverflow](http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs).
