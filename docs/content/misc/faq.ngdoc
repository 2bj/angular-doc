@ngdoc overview
@name FAQ
@description

#FAQ

## Вопросы

### Почему этот проект называется «AngularJS»? Почему пространство имен названо «ng»?

Потому что HTML имеет угловые скобки и «ng» звучит как «угловатый».


### Является ли AngularJS библиотекой, фреймворком, плагином или расширением для браузера?

AngularJS лучше подходит под определение фреймворка, хотя он гораздо легче, чем типичный фреймворк, и именно поэтому многие путают его с библиотекой.

AngularJS на 100% JavaScript, 100% на стороне клиента и совместим с настольными и мобильными браузерами.
Так что это определенно не плагин или другое родное расширение браузера.


### AngularJS это шаблонизатор?

Свысока Angular выглядит просто как еще один шаблонизатор. Но есть одна
важная причина, из-за которой Angular отличается от шаблонизаторов, что делает его пригодным для
разработки приложений: двунаправленное связывание данных. Шаблон скомпилирован в браузере и
этап компиляции производит в живом виде. Это означает, что вам, как разработчику, не нужно писать
код, который постоянно синхронизирует вид с моделью и модель с видом, как в других шаблонизаторах.


### Нужно ли беспокоиться по поводу дыры в безопасности в AngularJS?

Как и любая другая технология, AngularJS проницаем для атак. Angular, тем не менее, обеспечивают
встроенную защиту от основных дыр в безопасности, в том числе от межсайтового скриптинга и HTML инъекций. 
AngularJS делает круговое скрытие для всех строк и даже предлагает XSRF защиту для связи с сервером.

AngularJS был разработан, чтобы быть совместимым с другими мерами безопасности, как политика безопасности содержания
(CSP), HTTPS (SSL/TLS) и серверная аутентификация и авторизация, которые серьезно препятствуют возможным атакам, 
и мы настоятельно рекомендуем их использование.


### Могу ли я скачать исходные коды, сборки и хосты AngularJS среды на свой компьютер?

Да. Смотрите инструкции в разделе {@link downloading загрузка}.


### В каких браузерах работает Angular?

Мы запускаем наш обширный набор тестов в следующих браузерах: Safari, Chrome, Firefox, Opera,
IE8, IE9 и мобильные браузеры (Android, Chrome Mobile, IOS Safari). См. {@link guide/ie Совместимость с Internet 
Explorer} для бподробной информации о поддержке старых версий IE.


### Насколько быстр Angular?

Время запуска во многом зависит от скорости интернета, состояния кэша, используемого браузера и
задействованного оборудования, но обычно мы измеряем время загрузки десятками или сотнями миллисекунд.

Производительность среды исполнения может изменяться в зависимости от количества и сложности связывания на странице
, а также от скорости сервера (для приложений, которые запрашивают данные у сервера). Только для
иллюстрации мы обычно быстро строим приложения с сотнями или тысячами активных привязок.

### Насколько велик файл angular.js, который необходимо подключить?

Размер сжатого и минифицированного файла меньше 29 КБ.


### Могу ля я использовать Closure Library с открытым кодом в Angular?

Да, вы можете использовать виджеты из {@link http://code.google.com/closure/library Closure Library}
в Angular.


### Использует ли Angular jQuery?

Да, Angular можете использовать библиотеку {@link http://jquery.com/ jQuery}, если она используется в приложении и 
загружается до Angular. Если JQuery нет по адресу, указанному в скрипте, Angular откатывается до собственной 
реализации JQuery, которую мы называем {@link api/angular.element  jQLite}.


### Какова тестируемость Angular?

Очень тестируем и проработан в этом плане от начала до конца. Имеет встроенный механизм внедрения зависимости 
framework, поддерживает имитацию (mock) для большинства тяжелых зависимостей (серверной коммуникации). См. так же
{@link api/ng сервис}.


### Как узнать больше об Angular?

Смотрите рассказ от 17 июля 2012
"{@link http://www.youtube.com/watch?v=1CpiB3Wk25U AngularJS Intro + Dependency Injection}".


### Под какой лицензией распространяется Angular?

Лицензия MIT.

### Могу ли я загрузить и использовать логотип Angular?

Да! Вы можете найти файлы проекта в нашем репозитории на GitHub в разделе 
"{@link https://github.com/angular/angular.js/tree/master/images/logo angular.js/images/logo}" 
Дизайн логотипа под лицензией 
"{@link http://creativecommons.org/licenses/by-sa/3.0/ Creative Commons Attribution-ShareAlike 3.0 Unported License}". 
Если хотите использовать по-другому, свяжитесь с нами.


### Как получить символику AngularJS?

Мы часто приносим несколько футболок и наклеек на мероприятия, где выступаем. Если хотите заказать свои собственные, 
люди, которые производят нашу символику, в перспективе, с удовольствием сделают её для вас по существующему 
шаблону и вы сможете заказать любое количество.

**Наклейки**
Свяжитесь с Томом Виттингом (или кем-нибудь по продаже) по электронной почте tom@stickergiant.com, и скажите ему, 
что хотите заказать наклейки с AngularJS, такие же как в работе № 42711. Нужно будет предоставить информацию для 
выставления счета и доставки.

Пока дизайн остается точно таким же, {@link http://www.stickergiant.com StickerGiant} даст скидку на повторный заказ.

**Футболки**
Свяжитесь с {@link http://www.customink.com www.customink.com} и скажите, что хотите футболку с дизайном «angularjs»,
так же как и в прошлом заказе #2106371. Нужно будет предоставить информацию для выставления счета и доставки.

Пока дизайн остается точно таким же, ссалка даст скидку на повторный заказ.


## Распространенные ошибки

Служба поддержки канала Angular (# angularjs на Freenode) укажет на повторяющиеся ошибки, которые допускают новички. 
Цель данного документа — указать на них, прежде чем вы обнаружите их на своей шкуре.


### DOM Manipulation

Stop trying to use jQuery to modify the DOM in controllers. Really.
That includes adding elements, removing elements, retrieving their contents, showing and hiding them.
Use built-in directives, or write your own where necessary, to do your DOM manipulation.
See below about duplicating functionality.

If you're struggling to break the habit, consider removing jQuery from your app.
Really. Angular has the $http service and powerful directives that make it almost always unnecessary.
Angular's bundled jQLite has a handful of the features most commonly used in writing Angular directives, especially binding to events.

### Trying to duplicate functionality that already exists

There's a good chance that your app isn't the first to require certain functionality.
There are a few pieces of Angular that are particularly likely to be reimplemented out of old habits.

**ng-repeat**

`ng-repeat` gets this a lot.
People try to use jQuery (see above) to add more elements to some container as they're fetched from the server.
No, bad dog.
This is what `ng-repeat` is for, and it does its job very well.
Store the data from the server in an array on your `$scope`, and bind it to the DOM with `ng-repeat`.

**ng-show**

`ng-show` gets this frequently too.
Conditionally showing and hiding things using jQuery is a common pattern in other apps, but Angular has a better way.
`ng-show` (and `ng-hide`) conditionally show and hide elements based on boolean expressions.
Describe the conditions for showing and hiding an element in terms of `$scope` variables:

    <div ng-show="!loggedIn">Click <a href="#/login">here</a> to log in</div>

Note also the counterpart `ng-hide` and similar `ng-disabled`.
Note especially the powerful `ng-switch` that should be used instead of several mutually exclusive `ng-show`s.

**ng-class**

`ng-class` is the last of the big three.
Conditionally applying classes to elements is another thing commonly done manually using jQuery.
Angular, of course, has a better way.
You can give `ng-class` a whitespace-separated set of class names, and then it's identical to ordinary `class`.
That's not very exciting, so there's a second syntax:

    <div ng-class="{ errorClass: isError, warningClass: isWarning, okClass: !isError && !isWarning }">...</div>

Where you give `ng-class` an object, whose keys are CSS class names and whose values are conditional expressions using `$scope` variables.
The element will then have all the classes whose conditions are truthy, and none of those whose conditions are falsy.

Note also the handy `ng-class-even` and `ng-class-odd`, and the related though somewhat different `ng-style`.


### `$watch` and `$apply`

Angular's two-way data binding is the root of all awesome in Angular.
However, it's not magic, and there are some situations where you need to give it a nudge in the right direction.

When you bind a value to an element in Angular using `ng-model`, `ng-repeat`, etc., Angular creates a `$watch` on that value.
Then whenever a value on a scope changes, all `$watch`es observing that element are executed, and everything updates.

Sometimes, usually when you're writing a custom directive, you will have to define your own `$watch` on a scope value to make the directive react to changes.

On the flip side, sometimes you change a scope value in some code but the app doesn't react to it.
Angular checks for scope variable changes after pieces of your code have finished running; for example, when `ng-click` calls a function on your scope, Angular will check for changes and react.
However, some code is outside of Angular and you'll have to call `scope.$apply()` yourself to trigger the update.
This is most commonly seen in event handlers in custom directives.

### Combining `ng-repeat` with other directives

`ng-repeat` is extremely useful, one of the most powerful directives in Angular.
However the transformation it applies to the DOM is substantial.
Therefore applying other directives (such as `ng-show`, `ng-controller` and others) to the same element as `ng-repeat` generally leads to problems.

If you want to apply a directive to the whole repeat, wrap the repeat in a parent element and put it there.
If you want to apply a directive to each inner piece of the repeat, put it on a child of the element with `ng-repeat`.

### `$rootScope` exists, but it can be used for evil

Scopes in Angular form a hierarchy, prototypically inheriting from a root scope at the top of the tree.
Usually this can be ignored, since most views have a controller, and therefore a scope, of their own.

Occasionally there are pieces of data that you want to make global to the whole app.
For these, you can inject `$rootScope` and set values on it like any other scope.
Since the scopes inherit from the root scope, these values will be available to the expressions attached to directives like `ng-show` just like values on your local `$scope`.

Of course, global state sucks and you should use `$rootScope` sparingly, like you would (hopefully) use with global variables in any language.
In particular, don't use it for code, only data.
If you're tempted to put a function on `$rootScope`, it's almost always better to put it in a service that can be injected where it's needed, and more easily tested.

Conversely, don't create a service whose only purpose in life is to store and return bits of data.
