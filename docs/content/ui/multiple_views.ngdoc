@ngdoc overview
@name UI-Router: Множественные виды
@description

Можно назвать виды, так чтобы иметь более одного `ui-view` на состояние. Скажем, приложение имеет состояние, в котором
показываются динамически наполняемые график, таблица с данными и фильтры для таблицы. Примерно как здесь:

![Multiple Named Views Mockup](https://raw.github.com/wiki/angular-ui/ui-router/MultipleNamedViewsExample.png)

При задании нескольких видов необходимо использовать параметр `views` в определении состояния. `views` это объект.

### Виды переопределяют параметры шаблонов состояния
Если определить объект `views`, то `templateUrl`, `template` и `templateProvider` в соответствующем состоянии будут
проигнорированы. Так что, в случае родительского размещения этих видов, можно определить абстрактное состояние,
содержащее шаблон и дочернее состояние под размещенным состоянем, содержащим объект «views».

### Пример - согласование имен

Ключи `views` должны соответствовать именам видов, как здесь:
<pre>
<!-- somereportthing.html -->
<body>
  <div ui-view="filters"></div>
  <div ui-view="tabledata"></div>
  <div ui-view="graph"></div>
</body>
</pre>
<pre>
$stateProvider
  .state('report', {
    views: {
      'filters': { ... templates, controllers, resolve, etc ... },
      'tabledata': {},
      'graph': {},
    }
  })
</pre>
Затем для каждого вида из `views` можно определить собственный шаблон, контроллер и принимаемые данных.
<pre>
$stateProvider
  .state('report',{
    views: {
      'filters': {
        templateUrl: 'report-filters.html',
        controller: function($scope){ ... контроллер для вида с фильтрами ... }
      },
      'tabledata': {
        templateUrl: 'report-table.html',
        controller: function($scope){ ... контроллер для вида с таблицей ... }
      },
      'graph': {
        templateUrl: 'report-graph.html',
        controller: function($scope){ ... контроллер для вида с графиком ... }
      },
    }
  })
</pre>

### имена видов
Каждому виду можно назначить абсолютное имя, соответствующее схеме viewname@statename, где viewname это имя,
используемое в директиве вида и statename это абсолютное имя состояния, например, contact.item. Предыдущий пример
можно записать так:

<pre>
  .state('report',{
    views: {
      'filters@report': {
        templateUrl: 'report-filters.html',
        controller: function($scope){ ... контроллер только для вида с фильтрами ... }
      },
      ... другие виды ...
</pre>
Обратите внимание, что имя видо теперь указано как абсолютное, в отличие от относительного имени. Оно ориентировано
на вид «filters» расположеный в состоянии «report». Это позволяет производить достаточно мощное позиционирование 
видов. Предположим, что у нас было задано несколько вложенныхвидов, как здесь (Пример не реалистичный, он нужен 
только для иллюстрации позиционирования видов):
<pre>
<!-- index.html -->
<body ng-app>
<div ui-view></div> <!-- Поместите contacts.html сюда -->
<div ui-view="status"></div>
</body>
</pre>

<pre>
<!-- contacts.html -->
<h1>My Contacts</h1>
<div ui-view></div>
<div ui-view="detail"></div> <!-- Поместите contacts.detail.html сюда -->
</pre>

<pre>
<!-- contacts.detail.html -->
<h1>Contacts Details</h1>
<div ui-view></div>
<div ui-view="info"></div>
</pre>
Давайте посмотрим на различные виды, для которых можно настроить позиционирование изнутри состояния contacts.detail. 
Помните, что если используется `@` то путь вида считается абсолютным:
<pre>
$stateProvider
  .state('contacts.detail', {
    views: {
        // относительно позиционированный вид «info» в состоянии «contacts.detail»:
        "info" : { /* ... */ }            
        // относительно позиционированный безымянный вид в состоянии «contacts.detail»:
        "" : { /* ... */ } 
        // абсолютно позиционированный вид «detail» в родительском состоянии «contacts»:
        "detail@contacts" : { /* ... */ }
        // абсолютно позиционированный безымянный вид в родительском состоянии «contacts»:
        "@contacts" : { /* ... */ }
        // абсолютно позиционированный вид «status» в корневом безымянном состоянии:
        "status@" : { /* ... */ }
        // абсолютно позиционированный безымянный вид в корневом безымянном состоянии:
        "@" : { /* ... */ } 
  });
</pre>

Можно увидеть, что это возможность не только установить несколько видов в рамках одного состояния, но родительского
состояния, что могло бы стать настоящей площадкой для разработчиков :).
### События загрузки вида
Как только вид загружен (DOM отрендерен), «$scope» этого вида генерирует событие - «$viewContentLoaded», которое
может быть перехвачено областью видимости вида и любого родителя от него до «$rootScope». Можно использовать это 
событие для выполнения действий для этого вида, как только будет загружено содержимое вида.

<pre>
var viewController = function($scope){
    $scope.$on('$viewContentLoaded', function(){
        console.log('View Content Loaded');
    });
};
</pre>
