@ngdoc overview
@name UI-Router
@description

# UI-Router

## Окончательное решение де-факто для вложенных видов и маршрутизации.
>* Последний релиз 0.0.1: [сжатый](http://angular-ui.github.io/ui-router/release/angular-ui-router.min.js) / [без сжатия](http://angular-ui.github.io/ui-router/release/angular-ui-router.js)
>* Последняя сборка: [сжатый](http://angular-ui.github.io/ui-router/build/angular-ui-router.min.js) / [без сжатия](http://angular-ui.github.io/ui-router/build/angular-ui-router.js)


## Основная цель
Развить концепцию [angularjs](http://angularjs.org/) [***роутинга***](http://docs.angularjs.org/api/ng.$routeProvider) в более общую концепцию ***состояний*** для управления сложными интерфейсами приложений.

## Основные особенности
1. **Управление фиксированными состояниями**
>`$state` и `$stateProvider`

2. **Более мощные виды**
>директива `ui-view` (используется вместо `ng-view`)

3. **Именованные виды**
>`<div ui-view="chart">`

4. **Множество параллельных видов**
>
<pre>
<div ui-view="chart1">
<div ui-view="chart2">
</pre>
5. **Вложенные виды**
>загрузка шаблонов, содержащих вложенные `ui-view`s на любую глубину.

6. **Роутинг**
>Состояния могут соответствовать URL-адресам (хотя это не обязательно)


*В общем, делай что хочешь с состояниями и маршрутами.*


## Ресурсы

* [Глубокий обзор](https://github.com/angular-ui/ui-router/wiki)
* [FAQ](https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions)
* [Простое приложение](http://angular-ui.github.com/ui-router/sample/) ([Источник](https://github.com/angular-ui/ui-router/tree/master/sample))
* [Созданная документация](http://angular-ui.github.com/ui-router/build/doc/)

## Быстрый старт
1. Загрузка ui-router:
>* используя bower: `bower install angular-ui-router`
>* форк репозитория
>* загрузка последнего релиза ([сжатый](http://angular-ui.github.io/ui-router/release/angular-ui-router.min.js) | [без сжатия](http://angular-ui.github.io/ui-router/release/angular-ui-router.js))

1. Добавление angular-ui-router.min.js в index.html
> 
<pre>
<!doctype html>
<html ng-app="myapp">
<head>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js"></script>
  <script src="angular-ui-router.min.js"></script> <!-- Insert after main angular.js file -->
</pre>

2. Установка `ui.state` в качестве зависимости для вашего модуля
>
<pre>
var myapp = angular.module('myapp', ['ui.state']) 
</pre>

3. Добавление одного или более `ui-view` в приложение, с присвоением им имен.
>
<pre>
<body>
  <div ui-view="viewA"></div>
  <div ui-view="viewB"></div>
  <!-- А так же, навигация -->
  <a href="#/route1">Route 1</a>
  <a href="#/route2">Route 2</a>
</body>
</pre>

4. Настройка необходимых состояний в конфигураторе модуля
>
<pre>
myapp.config(function($stateProvider, $routeProvider){
  $stateProvider
   .state('index', {
      url: "", // root route
      views: {
        "viewA": {
          templateUrl: "index.viewA.html"
        },
        "viewB": {
          templateUrl: "index.viewB.html"
        }
      }
    })
    .state('route1', {
      url: "/route1",
      views: {
        "viewA": {
          templateUrl: "route1.viewA.html"
        },
        "viewB": {
          templateUrl: "route1.viewB.html"
        }
      }
    })
    .state('route2', {
      url: "/route2",
      views: {
        "viewA": {
          templateUrl: "route2.viewA.html"
        },
        "viewB": {
          templateUrl: "route2.viewB.html"
        }
      }
    })
})
</pre>

5. Пример для быстрого старта в действии. 
>**[Запустить в Plunker](http://plnkr.co/edit/vDURUN?p=preview)**

6. Это еще цветочки! Были показаны только множественные и именованные виды. Читайте подробнее о свойстве `state()`, 
вложенных видах, праметрах URL роутинга, обратной совместимости и проч.! 
>**[Глубокое погружение!](https://github.com/angular-ui/ui-router/wiki)**

## Разработка

UI-Router использует <code>grunt >= 0.4.x</code>, убедитесь, что обновили его и читайте
[руководство по переходу](http://gruntjs.com/upgrading-from-0.3-to-0.4).

Зависимости для сборки из исходников и запуска тестов:

* [grunt-cli](https://github.com/gruntjs/grunt-cli) - run: `$ npm install -g grunt-cli`
* Затем инсталируете зависимости разработчика: `$ npm install`

Существует ряд исполнителей в grunt-файле, который используется для построения решений, документов и т.д.

* `grunt`: Производство нормальной сборки, зауск jshint и karma тестов
* `grunt build`: Производство нормальной сборки
* `grunt dist`: Производство чистой сборки и генерация документации
* `grunt dev`: Запуск сервера разработчика (простое приложение) и наблюдение за изменениями, сборка и запуск karma-тестов при изменении.
