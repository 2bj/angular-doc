@ngdoc overview
@name UI-Router: Менеджер состояний
@description

##### Это подробное руководство проведет по всем аспектам UI-Router, его компонентам и возможностям.


# Менеджер состояний

Новый $stateProvider работает аналогично первой версии роутера в Angular, но сосредоточен исключительно 
на состоянии.

* Состоянию соответствует «место» в приложении с точки зрения общего пользовательского интерфейса и навигации.
* Состояние описывает (через контроллер/шаблон/свойства вида) как выглядит и что делает интерфейс в этом месте.
* В состояниях часто есть что-то общее и основной способ работы с общностями с помощью 
  иерархии состояний, то есть родительских/дочерних состояний, называемыми вложенными состояниями.

### Простейший вид состояния
Состояние, в своей простейшей форме может быть добавлено, как показано здесь (обычно внутрь module.config):
<pre>
<!-- in index.html -->
<body ng-controller="MainCtrl">
<section ui-view></section>
</body>
</pre>
<pre>
// в app-states.js (или любой другой)
$stateProvider.state('contacts', {
  template: '<h1>My Contacts</h1>'
})

// main-controller.js
function MainCtrl($state){
  $state.transitionTo('contacts');
}

</pre>
Шаблон автоматически помещается в одиночный `ui-view`, когда совершается переход в состояние.

#### Альтернативный способ задания шаблона
Вместо того чтобы описывать шаблоны в скрипте, можно загрузить их извне. **Скорее всего так вы будете задавать шаблоны
в большинстве случаев.**
<pre>
$stateProvider.state('contacts', {
  templateUrl: 'contacts.html'
})
</pre>
Или можно использовать функцию-провайдер, которая может быть внедрена и получит доступ к локальным данным:
<pre>
$stateProvider.state('contacts', {
  templateProvider: function ($timeout, $stateParams) {
    return $timeout(function () { return '<h1>'+$stateParams.contactId+'</h1>' }, 100);
  }
})
</pre>
### Контроллеры
Можно задать сразу и шаблон и контроллер:
<pre>
$stateProvider.state('contacts', {
  template: '<h1>{{title}}</h1>',
  controller: function($scope){
    $scope.title = 'My Contacts';
  }
})
</pre>

Или, если контроллер уже определен в модуле:
<pre>
$stateProvider.state('contacts', {
  controller: 'ContactsCtrl'
})
</pre>

#### Разрешение зависимостей
Можно использовать разрешение зависимостей для провайдера контроллера с контентом или данными, заданными для состояния.
Разрешение может быть списком зависимостей, которые будут внедрены в контроллер. Если любая из этих зависимостей 
обещана, они будут разрешены и преобразованы в значение до создания экземпляра контроллера и выдадут событие 
$routeChangeSuccess. Список представляет собой объект, состоящий из:

* key – {string}: имя зависимости, которая будет внедрена в контроллер.
* factory - {string|function}: Если строка, то это псевдоним сервиса. Если функция, то она будет внедрена и
возвратит значение, которое будет считаться зависимостью. Если результат это обещание, то оно разрешиться до того
как значение будет внедренов контроллер.

Пример разрешения сервиса. Допустим, имеется сервис с именем translations который хранит копии переводов всех строк
в приложении.
<pre>
$stateProvider.state('contacts', {
  template: '<h1>{{title}}</h1>',
  resolve: { translations: "translations" },
  controller: function($scope, translations){
    $scope.title = translations.lang.title;
  }
})
</pre>

Пример разрешения фабричной функции. Фабричная функция так же внедряема (не показано).
<pre>
$stateProvider.state('contacts', {
  template: '<h1>{{title}}</h1>',
  resolve: { title: function(){ return 'My Contacts' } },
  controller: function($scope, title){
    $scope.title = title;
  }
})
</pre>
### Колбэки onEnter и onExit
Опционально могут задаваться колбэки 'onEnter' и 'onExit', когда состояние становится активным или соответственно 
деактивируется. Колбэки так же имеют доступ ко всем разрешенным зависимостям.
<pre>
$stateProvider.state("contacts", {
  template: '<h1>{{title}}</h1>',
  resolve: { title: 'My Contacts' },
  controller: function($scope, title){
    $scope.title = 'My Contacts';
  },
  onEnter: function(title){
    if(title){ ... do something ... }
  },
  onExit: function(title){
    if(title){ ... do something ... }
  }
})
</pre>

### События изменения состояния
* `$stateChangeSuccess` - выбрасывается один раз при окончатльном переходе в состояние. 
* `$stateChangeStart` - выбрасывается при начале перехода.
* `$stateChangeError` - выбрасывается, если во время перехода появились ошибки.

Все эти события выбрасываются на уровне `$rootScope`.
