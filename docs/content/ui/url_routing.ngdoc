@ngdoc overview
@name UI-Router: URL роутинг
@description

Most states in your application will probably have a url associated with them. URL Routing was not an after thought
to the state mechanics, but was figured into the design from the beginning (all while keeping states separate from 
url routing) 

Большинство состояний в приложении, вероятно, будут связаны с URL-адесом. Не нужно думать, что URL-ротинг это
механическое продолжение идеи состояний, он фигурировал в проекте с самого начала (сохраняя при этом все 
состояния отдельно от URL маршрутизации)

Так можно задать базовый url-адрес
<pre>
$stateProvider
    .state('contacts', {
        url: "/contacts",
        templateUrl: 'contacts.html'
    })
</pre>

Теперь, когда пользователь переходит на `index.html/contacts` состояние «contacts» станет активным и главный `ui-view`
будет заполнен частичкой «contacts.html». Так же, если бы пользователь перешел в состояние «contacts»
через transitionTo('contacts')` тогда URL-адрес изменился бы на `index.html/contacts`.

### Параметры URL

Часто URL-адреса имеют изменяемые части, которые называют параметрами. Параметры определяют несколько свойств.
Основной параметр выглядит так:
<pre>
$stateProvider
    .state('contacts.detail', {
        url: "/contacts/:contactId",
        templateUrl: 'contacts.detail.html',
        controller: function ($stateParams) {
            // If we got here from a url of /contacts/42
            expect($stateParams).toBe({contactId: 42});
        }]
    })
</pre>

В качестве альтернативы можно использовать фигурные скобки:
<pre>
// идентично предыдущему примеру
url: "/contacts/{contactId}" 
</pre>
A bonus to using curly brackets is the ability to set a Regular Expression rule for the parameter:
<pre>
// будет соответствовать только contactId из восьми цифр
url: "/contacts/{contactId:[0-9]{1,8}}"
</pre>

### URL роутинг для вложенных состояний

Когда URL-роутинг используется вместе в вложенными состояниями, по умолчанию пути объединяются через цепочку 
наследований.

<pre>
$stateProvider
  .state('contacts', {
     url: '/contacts',
     ...
  })
  .state('contacts.list', {
     url: '/list',
     ...
  });
</pre>
Затем при переходе по URL «/contacts/list» будет установлено состояние «contacts.list». 

Если необходимо чтобы URL полностью совпадал, то нужно предварить URL строку специальным символом '^'.
<pre>
$stateProvider
  .state('contacts', {
     url: '/contacts',
     ...
  })
  .state('contacts.list', {
     url: '^/list',
     ...
  });
</pre>
Теперь состояние «contacts.list» будет установлено при переходе на «/list».

### Сервис $stateParams
Как было показано ранее, сревис $stateParams это объект, который будет иметь один ключ на URL-параметр. $StateParams
это идеальный способо предоставить контроллерам или другим сервисам отдельные части URL-адреса.
<pre>
// Если имеется url для состояния:
url: '/users/:id/details/{type}/{repeat:[0-9]+}?from&to'

// Тогда браузер перейдет на:
'/users/123/details//0'

// Объект $stateParams станет:
{ id:'123', type:'', repeat:'0' }

// Тогда браузер перейдет на:
'/users/123/details/default/0?from=there&to=here'

// Объект $stateParams станет:
{ id:'123', type:'default', repeat:'0', from='there', to='here' }
</pre>
